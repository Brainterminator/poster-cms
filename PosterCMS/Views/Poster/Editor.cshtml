@model PosterModel
@{
    ViewData["Title"] = "Editor";
    var pagesize = Context.Request.Cookies["PageSize"];
}
<div class="embedded-scope @(pagesize == "A3" ? "landscape" : "portrait")">

    <body>
        <main>


            <h1 contenteditable="true" data-max-length="20" oninput="updateModel(this, 'Title')" data-placeholder="Title...">@Model.Title
            </h1>

            <article>
                <h1 contenteditable="true" data-max-length="30" oninput="updateModel(this, 'Sub1')" data-placeholder="Subtitle...">
                    @Model.Sub1</h1>
                <p contenteditable="true" data-max-length="870" oninput="updateModel(this, 'Text1')" data-placeholder="Enter text here...">
                    @Model.Text1</p>
                <div class="image-wrapper">
                    <img src="@Model.ImageUrl1" class="editable-img" data-image-field="ImageUrl1"
                        onclick="openImageManager('ImageUrl1')">

                    <button type="button" class="edit-url-btn button"
                        onclick="openUrlEditor('ImageUrl1', '@Model.ImageUrl1')">Edit
                        URL</button>

                    <input type="hidden" id="ImageUrl1" name="ImageUrl1" value="@Model.ImageUrl1">
                </div>


            </article>

            <article>
                <h1 contenteditable="true" data-max-length="20" oninput="updateModel(this, 'Sub2')" data-placeholder="Subtitle...">
                    @Model.Sub2</h1>
                <p contenteditable="true" data-max-length="560" oninput="updateModel(this, 'Text2')" data-placeholder="Enter text here...">
                    @Model.Text2</p>
                <div class="image-wrapper">
                    <img src="@Model.ImageUrl2" class="editable-img" data-image-field="ImageUrl2"
                        onclick="openImageManager('ImageUrl2')">

                    <button type="button" class="edit-url-btn button"
                        onclick="openUrlEditor('ImageUrl2', '@Model.ImageUrl2')">Edit
                        URL</button>

                    <input type="hidden" id="ImageUrl2" name="ImageUrl2" value="@Model.ImageUrl2">
                </div>
            </article>

            <article>
                <h1 contenteditable="true" data-max-length="20" oninput="updateModel(this, 'Sub3')" data-placeholder="Subtitle...">
                    @Model.Sub3</h1>
                <p contenteditable="true" data-max-length="560" oninput="updateModel(this, 'Text3')" data-placeholder="Enter text here...">
                    @Model.Text3</p>
                <div class="image-wrapper">
                    <img src="@Model.ImageUrl3" class="editable-img" data-image-field="ImageUrl3"
                        onclick="openImageManager('ImageUrl3')">

                    <button type="button" class="edit-url-btn button"
                        onclick="openUrlEditor('ImageUrl3', '@Model.ImageUrl3')">Edit
                        URL</button>

                    <input type="hidden" id="ImageUrl3" name="ImageUrl3" value="@Model.ImageUrl3">
                </div>
            </article>
        </main>
    </body>
</div>
<div class="poster-bot @(pagesize == "A3" ? "a3-page" : "a4-page")">
    <button class="input button" type="button" onclick="submitPoster()">Save</button>
    @{
        var formAction = ViewData["FormAction"] as string;
        if (formAction == "EditPoster")
        {
            <a class="button delete" asp-controller="Poster" asp-action="DeletePoster" asp-route-id="@Model.ID">Delete</a>
        }
    }
</div>

<!-- Hidden Form -->
<form id="posterForm" method="post" asp-controller="Poster" asp-action="@ViewData["FormAction"]" style="display:none;">
    @Html.HiddenFor(m => m.ID)
    @Html.HiddenFor(m => m.CreateDate)
    @Html.HiddenFor(m => m.EditDate)
    @Html.HiddenFor(m => m.Author)

    <input type="hidden" name="Title" id="Title" value="@Model.Title" />
    <input type="hidden" name="Sub1" id="Sub1" value="@Model.Sub1" />
    <input type="hidden" name="Text1" id="Text1" value="@Model.Text1" />
    <input type="hidden" name="ImageUrl1" id="ImageUrl1" value="@Model.ImageUrl1" />
    <input type="hidden" name="Sub2" id="Sub2" value="@Model.Sub2" />
    <input type="hidden" name="Text2" id="Text2" value="@Model.Text2" />
    <input type="hidden" name="ImageUrl2" id="ImageUrl2" value="@Model.ImageUrl2" />
    <input type="hidden" name="Sub3" id="Sub3" value="@Model.Sub3" />
    <input type="hidden" name="Text3" id="Text3" value="@Model.Text3" />
    <input type="hidden" name="ImageUrl3" id="ImageUrl3" value="@Model.ImageUrl3" />
</form>

<!-- Image Modal -->
<div id="imageManagerModal" class="custom-modal" style="display:none;">
    <div class="modal-content">
        <div class="modal-header">
            <span class="close-btn" onclick="closeImageManager()">&times;</span>
        </div>
        <iframe id="imageManagerFrame" src="" frameborder="0" class="iframe-content"></iframe>
    </div>
</div>

<!-- URL Modal -->
<div id="urlModal" class="custom-modal url-modal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <span class="close-btn" onclick="closeUrlEditor()">&times;</span>
        </div>
        <main class="modal-body">
            <h1>URL Editor</h1>
            <form>
                <input type="hidden" id="urlTargetField">
                <div>
                    <label for="newImageUrl">Enter image URL:</label>
                    <input type="url" id="newImageUrl" />
                </div>
                <div>
                    <div class="buttons">
                        <button class="input button" type="button" onclick="applyImageUrl()">Apply</button>
                    </div>
                </div>
            </form>
        </main>
    </div>
</div>


@section Scripts {
    <script>
        (function () {
            function placeCaretAtEnd(el) {
                const range = document.createRange();
                const sel = window.getSelection();
                range.selectNodeContents(el);
                range.collapse(false);
                sel.removeAllRanges();
                sel.addRange(range);
            }

            function enforceMaxLength(editable) {
                const maxLength = parseInt(editable.dataset.maxLength, 10);
                if (isNaN(maxLength)) return;

                editable.addEventListener('input', () => {
                    const text = editable.innerText;
                    if (text.length > maxLength) {
                        editable.innerText = text.substring(0, maxLength);
                        placeCaretAtEnd(editable);

                        // Optional: dispatch input again if you're binding it to a hidden field
                        editable.dispatchEvent(new Event('input'));
                    }
                });
            }

            document.querySelectorAll('[contenteditable][data-max-length]').forEach(enforceMaxLength);
        })();
        document.addEventListener('pageSizeChanged', function (e) {
            const newPageSize = e.detail.pageSize;
            const scope = document.querySelector('.embedded-scope');

            if (!scope) return;

            // Switch between the two layout classes
            if (newPageSize === 'A3') {
                scope.classList.add('landscape');
                scope.parentElement.children[1].classList.add('a3-page');
                scope.classList.remove('portrait');
                scope.parentElement.children[1].classList.remove('a4-page');
            } else {
                scope.classList.remove('landscape');
                scope.parentElement.children[1].classList.add('a4-page');
                scope.classList.add('portrait');
                scope.parentElement.children[1].classList.remove('a3-page');
            }
        });
        document.querySelectorAll('[contenteditable="true"]').forEach(el => {
            const content = el.innerText.trim();
            if (!content) {
                el.innerHTML = ""; // removes whitespace/br/text nodes
            }
        });
        let currentImageField = "";

        function updateModel(el, field) {
            const hidden = document.getElementById(field);
            if (hidden) hidden.value = el.innerText.trim();
        }

        function submitPoster() {
            document.getElementById("posterForm").submit();
        }

        function openImageManager(fieldName = "") {
            currentImageField = fieldName;
            document.getElementById("imageManagerFrame").src = "/Home/ViewImages";
            document.getElementById("imageManagerModal").style.display = "block";
        }

        function closeImageManager() {
            document.getElementById("imageManagerModal").style.display = "none";
        }

        // Called by iframe when user picks an image
        function setImageUrl(url) {
            if (!currentImageField) return;
            document.getElementById(currentImageField).value = url;
            const img = document.querySelector(`img[data-image-field="${currentImageField}"]`);
            if (img) img.src = url;
            closeImageManager();
        }

        function openUrlEditor(fieldId, currentUrl) {
            document.getElementById('urlTargetField').value = fieldId;
            document.getElementById('newImageUrl').value = currentUrl;
            document.getElementById('urlModal').style.display = 'block';
        }

        function closeUrlEditor() {
            document.getElementById('urlModal').style.display = 'none';
        }

        function applyImageUrl() {
            const fieldId = document.getElementById('urlTargetField').value;
            const newUrl = document.getElementById('newImageUrl').value;

            document.getElementById(fieldId).value = newUrl;
            const img = document.querySelector(`img[data-image-field='${fieldId}']`);
            if (img) img.src = newUrl;

            closeUrlEditor();
        }

    </script>
}
